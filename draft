// if (typeof otherTexts === 'string') {
      //   // console.log('yo');
      //   if (basicTypo.upperCase == true) {
      //     otherTexts = basicTypo.otherText.value.toUpperCase()
      //   } else {
      //     otherTexts = basicTypo.otherText.value
      //   }

      //   const positionTxt = positions.randomPosition
        
      //   let x = positionTxt.x
      //   let y = positionTxt.y
      //   if (y == 5) {
      //     p.textAlign(p.LEFT, p.TOP)
      //   } else {
      //     p.textAlign(p.LEFT, p.BOTTOM)
      //   }
      //   x = (positionTxt.x * canvasSize) / 100
      //   y = (positionTxt.y * canvasSize) / 100
      //   p.text(otherTexts, x, y, width)
      // }    
    
    
    
    // if (basicTypo.chrome == true) {
    //   for (let i = 10; i >= 0; i--) {
    //     let offsetX = i * 3;
    //     let offsetY = i * 3;
    //     // let gradientFill = p.drawingContext.createLinearGradient(0, 0, canvasSize/2, canvasSize/2,)
    //     // gradientFill.addColorStop(0, p.color(0))
    //     // gradientFill.addColorStop(0.5, p.color(255))
    //     // gradientFill.addColorStop(1, p.color(0))
    //     // p.drawingContext.fillStyle = gradientFill
    //     p.fill(color, color, color);
    //     // p.text(mainText, xmain + offsetX, ymain + offsetY);
    //     p.textSize(txtSize)
    //     p.text(mainText, xmain , ymain);
    //     color += 20
    //     txtSize -= 1
    //   }
    //   p.drawingContext.shadowBlur = 10
    //   p.drawingContext.shadowColor = p.color(255)
    //   p.stroke(255);
    //   // let gradient = p.drawingContext.createConicGradient( 0, canvasSize/2, canvasSize/2,)
    //   // gradient.addColorStop(0, p.color(0))
    //   // gradient.addColorStop(0.5, p.color(255))
    //   // gradient.addColorStop(1, p.color(0))
    //   // p.drawingContext.strokeStyle = gradient
    //   // p.strokeWeight((0.3 * canvasSize) / 100)
    //   // let gradientFill = p.drawingContext.createLinearGradient(0, 0, canvasSize/2, canvasSize/2,)
    //   // gradientFill.addColorStop(0, p.color(0))
    //   // gradientFill.addColorStop(0.5, p.color(255))
    //   // gradientFill.addColorStop(1, p.color(0))
    //   // p.drawingContext.fillStyle = gradientFill
    //   // p.noFill()
    //   p.text(mainText, xmain, ymain);
    // } else {
    //   p.text(mainText, xmain, ymain, canvasSize, canvasSize)
    // }

    

    // if (basicTypo.glow == true) {
    //   glow(p, (255), 5)
    //   glow(p, (255), 10)
    //   glow(p, (255), 30)
    // }

    // if (basicTypo.stroke == true) {
    //   p.noFill()
    //   p.stroke(basicTypo.color)
    //   p.strokeWeight((0.9 * canvasSize) / 100)

    //   // let gradient = p.drawingContext.createConicGradient(0, canvasSize/2, canvasSize/2,)
    //   // const background = getBackgroundStore()
    //   // const color1 = background.preset.Gradient.color1
    //   // const color2 = background.preset.Gradient.color2
    //   // gradient.addColorStop(0, p.color(color1))
    //   // gradient.addColorStop(1, p.color(color2))
    //   // p.drawingContext.strokeStyle = gradient
    // }

    
    // p.textFont(basicTypo.font)
    
    // if (basicTypo.styles.includes('NORMAL') && basicTypo.styleMainText == 'NORMAL' && basicTypo.font == 'PT-Root-UI') {
    //   p.textFont(ptrootuiReg)
    // } else if (basicTypo.styles.includes('BOLD') && basicTypo.styleMainText == 'BOLD' && basicTypo.font == 'PT-Root-UI') {
    //   p.textFont(ptrootuiBold)
    // } else if (basicTypo.styles.includes('LIGHT') && basicTypo.styleMainText == 'LIGHT' && basicTypo.font == 'PT-Root-UI') {
    //   p.textFont(ptrootuiLight)
    // } else {
    //   p.textFont(basicTypo.font)
    // }



function setup() {
  // Create a 100x100 canvas
  createCanvas(500, 500);
  background(255,0,0)
  
  // Define the text strings
  let texts = [
    "Hello, World! World!World! World! World!World! ",
    "p5.js is fun p5.js is fun p5.js is fun p5.js is fun p5.js is fun p5.js is fun p5.js is fun p5.js is fun",
    "Creative Coding Creative Coding Creative Coding Creative Coding",
    "Short Text Wrapping Text Wrapping Text Wrapping Text Wrapping Text Wrapping Text",
    "Wrapping Text Wrapping Text Wrapping Text Wrapping Text Wrapping Text",
    "Example Example Example Example Example Example Example Example Example Example"
  ];

  // Set text properties
  textSize(12); // Set text size
  let maxWidth = width / 3; // Maximum width for text box
  
  // Top-left
  textAlign(LEFT, TOP);
  text(texts[0], 0, 0, maxWidth);
  
  textAlign(CENTER)
  text(texts[1], width/2, 0, maxWidth);

  // Top-right
  textAlign(RIGHT, TOP);
  text(texts[2], width-maxWidth, 0, maxWidth);

  // Bottom-left
  textAlign(LEFT, BOTTOM);
  drawTextBottomToTop(texts[3], 0, height, maxWidth);

  // Bottom-center
  textAlign(CENTER, BOTTOM);
  drawTextBottomToTop(texts[4], width / 2, height, maxWidth);

  // Bottom-right
  textAlign(RIGHT, BOTTOM);
  drawTextBottomToTop(texts[5], width, height, maxWidth);
}

// Function to draw text from bottom to top
function drawTextBottomToTop(txt, x, y, maxWidth) {
  let words = txt.split(' ');
  let lines = [];
  let currentLine = words[0];

  for (let i = 1; i < words.length; i++) {
    let word = words[i];
    let testLine = currentLine + ' ' + word;
    if (textWidth(testLine) <= maxWidth) {
      currentLine = testLine;
    } else {
      lines.push(currentLine);
      currentLine = word;
    }
  }
  lines.push(currentLine);

  for (let i = lines.length - 1; i >= 0; i--) {
    text(lines[i], x, y);
    y -= textAscent() + textDescent();
  }
}



let stopColor = colorA
      // let newStopColor
      let lastColor = colorB

      let stop = 0
      let newStop
      // gradientBg.addColorStop(stop, colorA)
      gradientBg.addColorStop(stop, stopColor)
      // console.log('Quantity from store', gradient.stops.quantity);
      let Q = gradient.stops.quantity
      // console.log(Q);
      // let Q = 5

      if (Q == 0) {
        gradientBg.addColorStop(0, colorA)
        gradientBg.addColorStop(1, colorB)
      } else {
        for (let i = 0; i < Q; i++) {

          // if (i == Q-1 && Q == !1) {
          //   newStop = 1
          // } else {
          //   newStop = stop + 1/(Q+1)
          // }
  
          newStop = stop + 1/(Q+1)
          // console.log('Stop value in for', newStop);
  
          if (stopColor == colorA) {
            stopColor = colorB
            // lastColor = colorA
          } else if (stopColor == colorB) {
            stopColor = colorA
            // lastColor = colorB
          }

          if (lastColor == colorA) {
            lastColor = colorA
          } else if (lastColor == colorB) {
            lastColor = colorB
          }
  
          gradientBg.addColorStop(newStop, stopColor)
          stop = newStop

          // let lastColor
          // if (stopColor == colorA) {
          //   lastColor = colorB
          // } else if (stopColor == colorB) {
          //   lastColor = colorA
          // }
  
            gradientBg.addColorStop(1, lastColor)
          // if (i = Q-1) {
          //   let lastColor
          //   if (stopColor == colorA) {
          //     lastColor = colorB
          //   } else if (stopColor == colorB) {
          //     lastColor = colorA
          //   }
          //   console.log(lastColor);
          //   gradientBg.addColorStop(1, lastColor)
          // } 
        }





        ///



        //
      // function randomColorCloseTo(baseColor) {
      //   // console.log('yo');
      //   let variation = 30; // Variation amount
      //   let r = p.red(baseColor) + p.random(-variation, variation);
      //   let g = p.green(baseColor) + p.random(-variation, variation);
      //   let b = p.blue(baseColor) + p.random(-variation, variation);
      //   return p.color(p.constrain(r, 0, 255), p.constrain(g, 0, 255), p.constrain(b, 0, 255));
      // }
      //



const points = [];
  const stepSize = 50; // Maximum distance between points

  // Helper functions
  function random(max) {
    return Math.random() * max;
  }

  function constrain(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }

  function cos(angle) {
    return Math.cos(angle);
  }

  function sin(angle) {
    return Math.sin(angle);
  }

  // Start with a random initial point
  let x = random(100);
  let y = random(100);
  points.push({ x: x, y: y });

  for (let i = 1; i < numPoints; i++) {
    // Calculate the new point position based on the last point
    let angle = random(2 * Math.PI);
    x += cos(angle) * stepSize;
    y += sin(angle) * stepSize;

    // Ensure the new point is within the canvas bounds
    x = constrain(x, 0, 100);
    y = constrain(y, 0, 100);

    points.push({ x: x, y: y });
  }


  /////
  // arcs


  for (let points of allPointSets) {
    for (let i = 0; i < points.length - 1; i++) {
      let startAngle = Math.atan2(points[i].y - 50, points[i].x - 50);
      let endAngle = Math.atan2(points[i + 1].y - 50, points[i + 1].x - 50);
      let radius = p.dist(points[i].x, points[i].y, 50, 50);
      
      p.arc(50, 50, radius * 2, radius * 2, startAngle, endAngle);
    }
  }